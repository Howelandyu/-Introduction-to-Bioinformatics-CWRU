# -*- coding: utf-8 -*-
"""CSDS458_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZuWj49XfWixwlQjdQ3IvhiDB44gzNVN1
"""

# from google.colab import files
# from google.colab import drive 
# drive.mount("/drive")
# uploaded = files.upload()

import numpy as np 
import pandas as pd


from subprocess import check_output
# print(check_output(["ls", "../input"]).decode("utf8"))
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn import svm
from sklearn import metrics
from sklearn.metrics import classification_report
import scipy.sparse as sp

training_variantsDF = pd.read_csv("training_variants")
training_variantsDF.head(5)

training_textDF = pd.read_csv("training_text", sep="\|\|", engine='python',header=None, skiprows=1, names=["ID","Text"])
training_textDF.head(5)

training_mergeDF = training_variantsDF.merge(training_textDF,left_on="ID",right_on="ID")

training_mergeDF.head(5)

testing_variantsDF = pd.read_csv("test_variants")
testing_variantsDF.head(5)

testing_textDF = pd.read_csv("test_text", sep="\|\|", engine='python',header=None, skiprows=1, names=["ID","Text"])
testing_textDF.head(5)

testing_mergeDF = testing_variantsDF.merge(testing_textDF,left_on="ID",right_on="ID")
testing_mergeDF.head(5)

training_mergeDF['Text'] = training_mergeDF.apply(lambda row: row['Gene'] if pd.isnull(row['Text']) else row['Text'],
    axis=1
)

y=training_mergeDF.Class
X=training_mergeDF[["Text","Variation",]]


from sklearn.model_selection  import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)



vect_text= CountVectorizer(stop_words ='english')
vect_variation= CountVectorizer(stop_words ='english')

vect_text.fit(X_train["Text"])
vect_text.fit(X_test["Text"])

vect_variation.fit(X_train["Variation"])
vect_variation.fit(X_test["Variation"])

variation_tranform_train=vect_variation.transform(X_train["Variation"])
variation_tranform_test=vect_variation.transform(X_test["Variation"])

text_transformed_train= vect_text.transform(X_train["Text"])
text_transformed_test=vect_text.transform(X_test["Text"])


x_train_final = sp.hstack((variation_tranform_train,text_transformed_train))
x_test_final = sp.hstack((variation_tranform_test,text_transformed_test))

svc_model=svm.LinearSVC(C=1.0,dual=False, max_iter=1000)
svc_model.fit(x_train_final,y_train)

y_pred_class = svc_model.predict(x_test_final)

y_pred_class

y_pred_class_df=pd.DataFrame(y_pred_class)
y_pred_class_df

testing_mergeDF['predicted_class'] = y_pred_class_df

testing_mergeDF.head(5)

onehot = pd.get_dummies(testing_mergeDF['predicted_class'])
testing_mergeDF = testing_mergeDF.join(onehot)

testing_mergeDF.rename(columns={'1.0':'1','2.0':'2','3.0':'3','4.0':'4','5.0':'5','6.0':'6','7.0':'7','8.0':'8','9.0':'9'},inplace = True)
testing_mergeDF.head(5)

submission_df = testing_mergeDF[["ID",1,2,3,4,5,6,7,8,9]]
submission_df.columns = ['ID', 'class1','class2','class3','class4','class5','class6','class7','class8','class9']
submission_df.head(5)

submission_df.to_csv('submission.csv', index=False)

